//https://www.programiz.com/cpp-programming/online-compiler/

#include <iostream>
#include <string>
using namespace std;

struct Contacto {
    string nombre;
    string direccion;
    string telefono;
};

struct Evento {
    string nombre;
    string fecha;
    string hora;
};

void agregarContacto(Contacto agenda[], int& numContactos) {
    Contacto nuevoContacto;
    cout << "Ingrese el nombre del contacto: ";
    getline(cin, nuevoContacto.nombre);
    cout << "Ingrese la direccion del contacto: ";
    getline(cin, nuevoContacto.direccion);
    cout << "Ingrese el telefono del contacto: ";
    getline(cin, nuevoContacto.telefono);
    agenda[numContactos] = nuevoContacto;
    numContactos++;
}

void borrarContacto(Contacto agenda[], int& numContactos) {
    string nombre;
    cout << "Ingrese el nombre del contacto que desea borrar: ";
    getline(cin, nombre);
    for (int i = 0; i < numContactos; i++) {
        if (agenda[i].nombre == nombre) {
            for (int j = i; j < numContactos - 1; j++) {
                agenda[j] = agenda[j + 1];
            }
            numContactos--;
            cout << "Contacto borrado exitosamente." << endl;
            return;
        }
    }
    cout << "No se encontro el contacto." << endl;
}

void buscarContacto(Contacto agenda[], int numContactos) {
    string nombre;
    cout << "Ingrese el nombre del contacto que desea buscar: ";
    getline(cin, nombre);
    for (int i = 0; i < numContactos; i++) {
        if (agenda[i].nombre == nombre) {
            cout << "Nombre: " << agenda[i].nombre << endl;
            cout << "Direccion: " << agenda[i].direccion << endl;
            cout << "Telefono: " << agenda[i].telefono << endl;
            return;
        }
    }
    cout << "No se encontro el contacto." << endl;
}

void agregarEvento(Evento eventos[], int& numEventos) {
    Evento nuevoEvento;
    cout << "Ingrese el nombre del evento: ";
    getline(cin, nuevoEvento.nombre);
    cout << "Ingrese la fecha del evento (dd/mm/aaaa): ";
    getline(cin, nuevoEvento.fecha);
    cout << "Ingrese la hora del evento (hh:mm): ";
    getline(cin, nuevoEvento.hora);
    eventos[numEventos] = nuevoEvento;
    numEventos++;
}

void borrarEvento(Evento eventos[], int& numEventos) {
    string nombre;
    cout << "Ingrese el nombre del evento que desea borrar: ";
    getline(cin, nombre);
    for (int i = 0; i < numEventos; i++) {
        if (eventos[i].nombre == nombre) {
            for (int j = i; j < numEventos - 1; j++) {
                eventos[j] = eventos[j + 1];
            }
            numEventos--;
            cout << "Evento borrado exitosamente." << endl;
            return;
        }
    }
    cout << "No se encontro el evento." << endl;
}

void buscarEvento(Evento eventos[], int numEventos) {
    string nombre;
    cout << "Ingrese el nombre del evento que desea buscar: ";
    getline(cin, nombre);
    for (int i = 0; i < numEventos; i++) {
        if (eventos[i].nombre == nombre) {
            cout << "Nombre: " << eventos[i].nombre << endl;
            cout << "Fecha: " << eventos[i].fecha << endl;
            cout << "Hora: " << eventos[i].hora << endl;
            return;
        }
    }
    cout << "No se encontro el evento." << endl;
}

int main() {
    Contacto agenda[100];
    Evento eventos[100];
    int numContactos = 0;
    int numEventos = 0;
    int opcion;
    do {
        cout << "MENU" << endl;
        cout << "1. Agregar contacto" << endl;
        cout << "2. Borrar contacto" << endl;
        cout << "3. Buscar contacto" << endl;
        cout << "4. Agregar evento" << endl;
        cout << "5. Borrar evento" << endl;
        cout << "6. Buscar evento" << endl;
        cout << "7. Salir" << endl;
        cout << "Ingrese una opcion: ";
        cin >> opcion;
        cin.ignore();
        switch (opcion) {
            case 1:
                agregarContacto(agenda, numContactos);
                break;
            case 2:
                borrarContacto(agenda, numContactos);
                break;
            case 3:
                buscarContacto(agenda, numContactos);
                break;
            case 4:
                agregarEvento(eventos, numEventos);
                break;
            case 5:
                borrarEvento(eventos, numEventos);
                break;
            case 6:
                buscarEvento(eventos, numEventos);
                break;
            case 7:
                cout << "Saliendo..." << endl;
                break;
            default:
                cout << "Opcion invalida." << endl;
                break;
        }
    } while (opcion != 7);
    return 0;
}
